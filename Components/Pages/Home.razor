@page "/"
@using Microsoft.EntityFrameworkCore
@using JobDescriptionGenerator.Forms
@using JobDescriptionGenerator.Components.JobDescription
@inject AppDbContext Db
@inject JobLevelDictionary JobLevelDictionary
@rendermode InteractiveServer

<h1>Generate a Job Description</h1>

<EditForm Model="form" OnValidSubmit="GenerateDoc">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <JobSelectors Form="form" JobFamilies="jobFamilies" JobTitles="jobTitles" OnJobFamilySelected="OnJobFamilySelected"
        OnJobTitleSelected="OnJobTitleSelected" />


    @if (form.JobTitleId is not null)
    {
        <IsManagerField Form="form" />

        <EditableList Label="Knowledge and Skills" Items="form.KnowledgeAndSkills" For="@(() => form.KnowledgeAndSkills)" />

        <JobPurposeField Form="form" />

        <EditableList Label="Key Accountabilities" Items="form.KeyAccountabilities"
            For="@(() => form.KeyAccountabilities)" />

        <div class="mt-4">
            <button type="submit">Generate Document</button>
        </div>
    }
</EditForm>

@code {
    private JobDescriptionForm form = new();

    private List<JobFamily> jobFamilies = new();
    private List<JobTitle> jobTitles = new();

    protected override async Task OnInitializedAsync()
    {
        jobFamilies = await Db.JobFamilies.ToListAsync();
    }

    private async Task OnJobFamilySelected()
    {
        jobTitles = await Db.JobTitles
        .Where(t => t.JobFamilyId == form.JobFamilyId)
        .OrderBy(t => t.JobLevel)
        .ToListAsync();

        form.JobTitleId = null;
        form.KnowledgeAndSkills.Clear();
        form.KeyAccountabilities.Clear();
    }

    private async Task OnJobTitleSelected()
    {
        var title = await Db.JobTitles.FindAsync(form.JobTitleId);

        var levelKey = $"Job Level - {title.JobLevel}";
        form.KnowledgeAndSkills = JobLevelDictionary.GetValueOrDefault(levelKey, new()).ToList();

    }

    private async Task GenerateDoc()
    {
        Console.WriteLine("🚀 Form submitted!");
    }
}
