@page "/"
@using Microsoft.EntityFrameworkCore
@using JobDescriptionGenerator.Forms
@inject AppDbContext Db
@inject JobLevelDictionary JobLevelDictionary
@rendermode InteractiveServer

<h1>Generate a Job Description</h1>

<EditForm Model="form" OnValidSubmit="GenerateDoc">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Job Family Dropdown -->
    <div class="mt-3">
        <label for="jobFamilySelection">Select a Job Family</label>
        <InputSelect id="jobFamilySelection" @bind-Value="form.JobFamilyId" @bind-Value:after="OnJobFamilySelected">
            <option disabled selected value="">-- Select Job Family --</option>
            @foreach (var family in jobFamilies)
            {
                <option value="@family.JobFamilyId">@family.JobFamilyName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => form.JobFamilyId)" />
    </div>

    <!-- Job Title Dropdown -->
    @if (jobTitles.Any())
    {
        <div class="mt-3">
            <label for="jobTitleSelection">Select a Job Title</label>
            <InputSelect id="jobTitleSelection" @bind-Value="form.JobTitleId" @bind-Value:after="OnJobTitleSelected">
                <option disabled selected value="">-- Select Job Title --</option>
                @foreach (var title in jobTitles)
                {
                    <option value="@title.JobTitleId">Job Level - @title.JobLevel: @title.JobTitleName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => form.JobTitleId)" />
        </div>
    }

    <!-- Is Manager -->
    @if (form.JobTitleId is not null)
    {
        <div class="mt-3">
            <label><strong>Is a People Manager?</strong></label>
            <InputRadioGroup @bind-Value="form.IsManager">
                <InputRadio id="managerYes" Value="true" />
                <label for="managerYes">Yes</label>
                <InputRadio id="managerNo" Value="false" class="ms-2" />
                <label for="managerNo">No</label>
            </InputRadioGroup>
        </div>

        <!-- Job Purpose -->
        <div class="mt-3">
            <label><strong>Job Purpose</strong></label><br />
            <InputTextArea @bind-Value="form.JobPurpose" rows="4" cols="60" placeholder="Describe job purpose..." />
            <ValidationMessage For="@(() => form.JobPurpose)" />
        </div>

        <!-- Knowledge and Skills -->
        <div class="mt-3">
            <label><strong>Knowledge and Skills</strong></label>
            @for (int i = 0; i < form.KnowledgeAndSkills.Count; i++)
            {
                var index = i;
                <div class="mt-2">
                    <InputTextArea @bind-Value="form.KnowledgeAndSkills[index]" rows="1" cols="60"
                        placeholder="Describe knowledge or skill..." />
                    <button type="button" @onclick="() => RemoveKnowledgeSkill(index)">Remove</button>
                </div>
            }
            <ValidationMessage For="@(() => form.KnowledgeAndSkills)" />
        </div>
        <button type="button" @onclick="AddKnowledgeSkill">+ Add Skill</button>

        <!-- Key Accountabilities -->
        <div class="mt-3">
            <label><strong>Key Accountabilities</strong></label>
            @for (int i = 0; i < form.KeyAccountabilities.Count; i++)
            {
                var index = i;
                <div class="mt-2">
                    <InputTextArea @bind-Value="form.KeyAccountabilities[index]" rows="1" cols="60"
                        placeholder="Describe accountability..." />
                    <button type="button" @onclick="() => RemoveAccountability(index)">Remove</button>
                </div>
            }
            <ValidationMessage For="@(() => form.KeyAccountabilities)" />
        </div>
        <button type="button" @onclick="AddAccountability">+ Add Accountability</button>

        <div class="mt-4">
            <button type="submit">Generate Document</button>
        </div>
    }
</EditForm>

@code {
    private JobDescriptionForm form = new();

    private List<JobFamily> jobFamilies = new();
    private List<JobTitle> jobTitles = new();

    protected override async Task OnInitializedAsync()
    {
        jobFamilies = await Db.JobFamilies.ToListAsync();
    }

    private async Task OnJobFamilySelected()
    {
        jobTitles = await Db.JobTitles
        .Where(t => t.JobFamilyId == form.JobFamilyId)
        .OrderBy(t => t.JobLevel)
        .ToListAsync();

        form.JobTitleId = null;
        form.KnowledgeAndSkills.Clear();
        form.KeyAccountabilities.Clear();
    }

    private async Task OnJobTitleSelected()
    {
        var title = await Db.JobTitles.FindAsync(form.JobTitleId);

        var levelKey = $"Job Level - {title.JobLevel}";
        form.KnowledgeAndSkills = JobLevelDictionary.GetValueOrDefault(levelKey, new()).ToList();

    }

    private void AddKnowledgeSkill() => form.KnowledgeAndSkills.Add(string.Empty);
    private void RemoveKnowledgeSkill(int index)
    {
        if (index >= 0 && index < form.KnowledgeAndSkills.Count)
            form.KnowledgeAndSkills.RemoveAt(index);
    }

    private void AddAccountability() => form.KeyAccountabilities.Add(string.Empty);
    private void RemoveAccountability(int index)
    {
        if (index >= 0 && index < form.KeyAccountabilities.Count)
            form.KeyAccountabilities.RemoveAt(index);
    }

    private async Task GenerateDoc()
    {
        Console.WriteLine("🚀 Form submitted!");
    }
}
