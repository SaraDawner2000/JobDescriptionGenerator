@page "/"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject JobLevelDictionary JobLevelDictionary
@rendermode InteractiveServer
<h1>Generate a job description</h1>
<div class="mt-3">
    <label for="jobFamilySelection">Select a Job Family</label>
    <select id="jobFamilySelection" @bind="selectedJobFamilyId" @bind:after="OnJobFamilySelected">
        <option disabled selected value="">-- Select Job Family --</option>
        @foreach (var family in jobFamilies)
        {
            <option value="@family.JobFamilyId">@family.JobFamilyName</option>
        }
    </select>
</div>
@if (jobTitles.Any())
{
    <div>
        <label for="jobTitleSelection">Select a Job Title</label>
        <select id="jobTitleSelection" @bind="selectedJobTitleId">
            <option disabled selected value="">-- Select Job Title --</option>
            @foreach (var title in jobTitles)
            {
                <option value="@title.JobTitleId">@title.JobTitleName</option>
            }
        </select>
    </div>
}

@if (selectedJobTitleId is not null)
{
    <div class="mt-3">
        <label for="radioGroup">Is a People Manager?</label>
        <InputRadioGroup id="radioGroup" @bind-value="isManager">
            <InputRadio value="true" id="managerYes" />
            <label for="managerYes">Yes</label>

            <InputRadio value="false" id="managerNo" />
            <label for="managerNo">No</label>
        </InputRadioGroup>
    </div>

    <div class="mt-3">
        <label><strong>Job Purpose</strong></label><br />
        <textarea @bind="jobPurpose" rows="4" cols="50" placeholder="Describe job purpose..."></textarea>
    </div>

    <div class="mt-3">
        <label><strong>Key Accountabilities</strong></label><br />
        @for (int i = 0; i < keyAccountabilities.Count; i++)
        {
            var index = i;
            <div class="mb-2">
                <textarea @bind="keyAccountabilities[index]" rows="2" cols="50"
                    placeholder="Describe accountability..."></textarea>
                <button type="button" @onclick="() => RemoveAccountability(index)">Remove</button>
            </div>
        }

        <button type="button" @onclick="AddAccountability">+ Add Accountability</button>
    </div>

    <div class="mt-4">
        <button @onclick="GenerateDoc">Generate Document</button>
    </div>
}

@code {
    private List<JobFamily> jobFamilies = new();
    private List<JobTitle> jobTitles = new();
    private int? selectedJobFamilyId;
    private int? selectedJobTitleId;
    private bool isManager;
    private string jobPurpose;
    private List<string> keyAccountabilities = new();


    protected override async Task OnInitializedAsync()
    {
        jobFamilies = await Db.JobFamilies.ToListAsync();
    }

    private async Task OnJobFamilySelected()
    {
        jobTitles = await Db.JobTitles
        .Where(t => t.JobFamilyId == selectedJobFamilyId)
        .ToListAsync();
    }

    private void AddAccountability()
    {
        keyAccountabilities.Add(string.Empty);
    }

    private void RemoveAccountability(int index)
    {
        if (index >= 0 && index < keyAccountabilities.Count)
            keyAccountabilities.RemoveAt(index);
    }

    private async Task GenerateDoc() { }
}
